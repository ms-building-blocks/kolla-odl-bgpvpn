---
- include: enable_nested_virt.yml
  become: True

- name: Enable docker repo
  yum_repository:
    name: docker-ce
    description: Docker CE repo
    baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
    gpgcheck: yes
    gpgkey: https://download.docker.com/linux/centos/gpg
  when: ansible_distribution == "CentOS"

- name: Install yum dependencies
  become: True
  package:
    name: "{{ item }}"
  with_items: "{{ yum_dependencies }}"

- name: Install pip dependencies
  become: True
  pip:
    name: "{{ item }}"
  with_items: "{{ pip_dependencies }}"

- name: Update docker BIP
  become: True
  lineinfile:
    path: /usr/lib/systemd/system/docker.service
    regexp: "ExecStart=/usr/bin/dockerd"
    line: "ExecStart=/usr/bin/dockerd --bip=172.26.0.1/16"

- name: Starting services
  become: True
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - libvirtd
    - docker

- name: Check if bridges already exist
  become: True
  virt_net:
    command: list_nets
  register: bridge_exists

- name: create virtual bridges 
  become: True
  virt_net:
    command: define
    name: "{{ item.name }}"
    xml: '{{ lookup("template", "{{ item.role }}.xml.j2") }}'
  when: item.name not in bridge_exists.list_nets
  with_items: "{{ host_interfaces }}"

- name: start virtual bridges
  become: True
  virt_net:
    command: start
    autostart: yes
    name: "{{ item.name }}"
  when: item.name not in bridge_exists.list_nets
  with_items: "{{ host_interfaces }}"

- name: Restarting services
  become: True
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
    - libvirtd
    - docker

- name: Create a local docker registry
  docker_container:
    name: registry
    image: registry
    restart_policy: always
    published_ports:
      - "5000:5000"

- name: Make sure temp directory exists
  file:
    path: "{{ tmp_dir }}"
    state: directory

- name: Check if the file is already in libvirt directory
  stat:
    path: "{{ libvirt_dir }}/{{ item.name }}.qcow2"
  with_items: "{{ kolla_nodes }}"
  register: copied

- name: Check if the file is already downloaded
  stat:
    path: "{{ tmp_dir }}/{{ kolla_os_image_xz }}"
  register: downloaded

- name: Check if the file is already unpacked
  stat:
    path: "{{ tmp_dir }}/{{ kolla_os_image }}"
  register: unpacked

- name: Download Operating System image
  get_url:
    url: "{{ kolla_os_image_xz_url }}"
    dest: "{{ tmp_dir }}"
  when: not (downloaded.stat.exists or unpacked.stat.exists)

- name: Uncompress OS image
  command: "unxz -k {{ tmp_dir }}/{{ kolla_os_image_xz }}"
  when: not unpacked.stat.exists

- name: create VM-specifc directories
  file:
    path: "{{ tmp_dir }}/{{ item.name }}"
    state: directory
  with_items: "{{ kolla_nodes }}"

- name: Increase the image size
  command: "qemu-img resize {{ tmp_dir }}/{{ kolla_os_image }} +10G"
  when: not item.stat.exists
  with_items: "{{ copied.results }}"

- name: Copy os images to libvirt directory
  become: True
  copy:
    src: "{{ tmp_dir }}/{{ kolla_os_image }}"
    dest: "{{ libvirt_dir }}/{{ item.item.name }}.qcow2"
    remote_src: True
  when: not item.stat.exists
  with_items: "{{ copied.results }}"

- name: Instantiate meta-data file
  template:
    src: "meta-data.j2"
    dest: "{{ tmp_dir }}/{{ item.name }}/meta-data"
  with_items: "{{ kolla_nodes }}"

- name: Instantiate user-data file
  template:
    src: "user-data.j2"
    dest: "{{ tmp_dir}}/{{ item.name }}/user-data"
  with_items: "{{ kolla_nodes }}"

- name: Create config drive
  become: True
  command: "genisoimage -o {{ tmp_dir }}/{{ item.name }}/config.iso \
           -V cidata -r -J {{ tmp_dir }}/{{ item.name }}/meta-data \
           {{ tmp_dir }}/{{ item.name }}/user-data"
  with_items: "{{ kolla_nodes }}"

- name: Define a VM
  become: True
  virt:
    name: "{{ item.name }}"
    command: define
    xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  with_items: "{{ kolla_nodes }}"

- name: Start a VM
  become: True
  virt:
    name: "{{ item.name }}"
    state: running
  with_items: "{{ kolla_nodes }}"

- name: Wait for VMs to boot
  wait_for:
    host: "{{ item.1.address }}"
    port: 22
    delay: 10
    timeout: 250
  with_subelements:
    - "{{ kolla_nodes }}"
    - interfaces
  when: "item.1.address is defined"

- name: Insert kolla nodes into ssh_config
  become: True
  blockinfile:
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    dest: "/etc//ssh/ssh_config"
